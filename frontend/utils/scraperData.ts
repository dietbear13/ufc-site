/**
 * ufc-scraper.js
 *
 * –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∏ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (events) –∏ –±–æ–π—Ü–æ–≤ (fighters)
 * UFC —Å —Å–∞–π—Ç–∞ GIDStats, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md (YAML frontmatter) –¥–ª—è Jekyll.
 *
 * –ù–∞ –±–∞–∑–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö events-scraper.js –∏ fighters-scraper.js
 */

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cheerio = require('cheerio');
const matter = require('gray-matter');
const crypto = require('crypto');

// ==== –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ ====
class UFCGidStatsScraper {
    constructor() {
        // –ü—É—Ç–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –±–æ–π—Ü–æ–≤
        this.EVENTS_DIR = path.join(__dirname, '../_events');
        this.FIGHTERS_DIR = path.join(__dirname, '../_fighters');

        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.BASE_URL = 'https://gidstats.com';
        this.EVENTS_URL = `${this.BASE_URL}/ru/events/`;
        this.FIGHTERS_LIST_URL = `${this.BASE_URL}/ru/fighters/`;

        // –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–π—Ü–æ–≤ –æ–±—Ö–æ–¥–∏–º
        this.MAX_FIGHTER_PAGES = 500;
        // –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        this.DELAY_MS_EVENTS = 1000;
        this.DELAY_MS_FIGHTERS = 500;

        // –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –±–∞–Ω–∞)
        this.USER_AGENTS = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
            'Mozilla/5.0 (X11; Linux x86_64)',
        ];
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    // –ó–∞–¥–µ—Ä–∂–∫–∞
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ UFCGidStatsScraper
    async runFightersOnly() {
        // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É _fighters, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.FIGHTERS_DIR)) {
            fs.mkdirSync(this.FIGHTERS_DIR, { recursive: true });
        }

        try {
            // –ü–∞—Ä—Å–∏–º –±–æ–π—Ü–æ–≤
            console.log('ü•ä –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–æ–π—Ü–æ–≤...');
            const fighterLinks = await this.getAllFighterLinks();
            console.log(`üîó –ù–∞–π–¥–µ–Ω–æ –±–æ–π—Ü–æ–≤: ${fighterLinks.length}`);

            let idx = 0;
            for (const url of fighterLinks) {
                idx++;
                console.log(`\n[${idx}/${fighterLinks.length}] –ü–∞—Ä—Å–∏–º –±–æ–π—Ü–∞: ${url}`);
                try {
                    const fighterData = await this.parseFighter(url);
                    this.saveFighterToFile(fighterData);
                } catch (err) {
                    console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–æ–π—Ü–∞ (${url}): ${err.message}`);
                }
                await this.sleep(this.DELAY_MS_FIGHTERS);
            }
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –±–æ–π—Ü–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ–π—Ü–æ–≤:', err);
        }
    }


    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD5-—Ö—ç—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    hashContent(data) {
        return crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');
    }

    // –ó–∞–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async fetchHTML(url, retries = 3) {
        while (retries > 0) {
            try {
                const response = await axios.get(url, {
                    headers: {
                        'User-Agent': this.USER_AGENTS[Math.floor(Math.random() * this.USER_AGENTS.length)]
                    },
                    timeout: 10000
                });
                return cheerio.load(response.data);
            } catch (err) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}: ${err.message}`);
                retries--;
                await this.sleep(1000);
            }
        }
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫: ${url}`);
    }

    // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è + slugify (–ª–æ–≥–∏–∫–∞ –∏–∑ events-scraper.js)
    slugify(str) {
        const map = {
            '–∞': 'a',  '–±': 'b',  '–≤': 'v',  '–≥': 'g',  '–¥': 'd',
            '–µ': 'e',  '—ë': 'yo', '–∂': 'zh','–∑': 'z',  '–∏': 'i',
            '–π': 'y',  '–∫': 'k',  '–ª': 'l',  '–º': 'm',  '–Ω': 'n',
            '–æ': 'o',  '–ø': 'p',  '—Ä': 'r',  '—Å': 's',  '—Ç': 't',
            '—É': 'u',  '—Ñ': 'f',  '—Ö': 'kh','—Ü': 'ts','—á': 'ch',
            '—à': 'sh','—â': 'sch','—ã': 'y',  '—ç': 'e',  '—é': 'yu',
            '—è': 'ya','—å': '','—ä': '','—ñ':'i','—ó':'yi','—î':'e','“ë':'g'
        };
        let result = str.toLowerCase();
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
        result = result.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        result = result.replace(/[\u0400-\u04FF]/g, char => map[char] || '');
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ a-z0-9, –Ω–∞ –¥–µ—Ñ–∏—Å
        result = result.replace(/[^a-z0-9]+/g, '-');
        // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ / –∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        result = result.replace(/^-+|-+$/g, '');
        return result;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "10.12.23" -> "2023-12-10"
    convertDate(dateStr) {
        const parts = dateStr.trim().split('.');
        if (parts.length !== 3) return null;
        let [d, m, y] = parts;
        if (y.length === 2) y = `20${y}`;
        return `${y}-${m}-${d}`;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç DD.MM.YY –∏–ª–∏ DD.MM.YYYY)
    extractDateFromTitle(title) {
        const match = title.match(/(\d{2})[./](\d{2})[./](\d{2,4})/);
        if (!match) return null;
        let [_, dd, mm, yy] = match;
        if (yy.length === 2) yy = `20${yy}`;
        return `${yy}-${mm}-${dd}`;
    }

    // === –ë–õ–û–ö: –ü–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (events), –ª–æ–≥–∏–∫–∞ –∏–∑ events-scraper.js ===

    // –°–±–æ—Ä –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã (—Å —É—á—ë—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    async getEventLinks() {
        const links = new Set();
        let page = 1;
        let hasMore = true;

        while (hasMore) {
            // –ù–∞ 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: /ru/events/, –Ω–∞ 2-–π: page-2.html –∏ —Ç. –¥.
            const pageUrl = (page === 1)
                ? this.EVENTS_URL
                : `${this.EVENTS_URL}page-${page}.html`;

            try {
                const $ = await this.fetchHTML(pageUrl);
                let found = 0;
                $('a.events-list__link, a.events__link').each((_, el) => {
                    const href = $(el).attr('href');
                    if (href && href.includes('/ru/events/')) {
                        const fullUrl = href.startsWith('http') ? href : (this.BASE_URL + href);
                        links.add(fullUrl);
                        found++;
                    }
                });
                // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ 10 —Ç—É—Ä–Ω–∏—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è
                if (found < 10) {
                    hasMore = false;
                } else {
                    page++;
                    await this.sleep(this.DELAY_MS_EVENTS);
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${pageUrl} ‚Äì ${err.message}`);
                hasMore = false;
            }
        }
        return Array.from(links);
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–∞ fight card (main / prelims)
    parseFightCardSection($, sectionId) {
        const card = [];
        $(`#${sectionId} li.other-fights-list__item`).each((_, li) => {
            const fighterNames = $(li).find('.name').map((_, nameEl) => $(nameEl).text().trim()).get();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –±–æ—è, –∫–æ–ª-–≤–æ —Ä–∞—É–Ω–¥–æ–≤
            const clockElem = $(li).find('.center-block__clock');
            const fightTime = clockElem.contents().first().text().trim();
            let rounds = clockElem.find('span').text().trim();
            if (rounds) {
                // –ó–∞—á–∞—Å—Ç—É—é –±—ã–≤–∞–µ—Ç "‚Ä¢", "x", "√ó", –∑–∞–º–µ–Ω–∏–º –Ω–∞ x
                rounds = rounds.replace('‚Ä¢', '').trim().replace(/[—Ö√ó]/g, 'x');
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const weight = $(li).find('.weight').text().trim();
            // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ (preview)
            const fightLink = $(li).find('a.other-fights-list__link').attr('href') || '';

            if (fighterNames.length === 2) {
                const fightData = {
                    fighter1: fighterNames[0],
                    fighter2: fighterNames[1],
                    weight: weight,
                    time: fightTime,
                    rounds: rounds
                };
                if (fightLink) {
                    fightData.preview_url = fightLink;
                }
                card.push(fightData);
            }
        });
        return card;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    async parseEvent(url) {
        const $ = await this.fetchHTML(url);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let title = $('h1.tournament-top__title, .events__title').first().text().trim();
        if (!title) {
            title = $('title').text().trim();
        }
        // –î–∞—Ç–∞
        const rawDate = $('.tournament-date .date').text().trim();
        let date = this.convertDate(rawDate) || this.extractDateFromTitle(title);
        const time = $('.tournament-date .time').text().trim();
        const place = $('.tournament-date .address').text().trim();
        if (!date || !/^\d{4}-\d{2}-\d{2}$/.test(date)) {
            throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ "${title}" (raw date="${rawDate}")`);
        }

        // –ü–∞—Ä—Å–∏–º main / prelims
        const mainCard = this.parseFightCardSection($, 'content1');
        const prelimCard = this.parseFightCardSection($, 'content2');

        // SEO-friendly slug
        const eventSlug = this.slugify(title);
        let origEventSlug = url.replace(`${this.BASE_URL}/ru/events/`, '').replace(/\/$/, '');

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º preview_url, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–æ–º–µ–Ω/ru –∏ —Ç. –¥.
        [...mainCard, ...prelimCard].forEach(fight => {
            if (!fight.preview_url) return;
            let preview = fight.preview_url;
            preview = preview.replace(/^https?:\/\/[^/]+/, '').replace('/ru', '');
            if (preview.endsWith('.html')) {
                preview = preview.slice(0, -5);
            }
            // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π slug –Ω–∞ eventSlug
            preview = preview.replace(`/events/${origEventSlug}/`, `/events/${eventSlug}/`);
            // –ó–∞–º–µ–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã
            preview = preview.replace(/_/g, '-');
            if (!preview.endsWith('/')) preview += '/';
            fight.preview_url = preview;
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º frontmatter
        const frontmatter = {
            title: title,
            date: date,
            time: time,
            place: place,
            card: {
                main: mainCard,
                prelims: prelimCard
            },
            source_url: `/events/${eventSlug}/`,
            meta: {
                updated: new Date().toISOString()
            }
        };
        return { slug: eventSlug, frontmatter };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ .md —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö—ç—à–∞
    saveEventToFile(eventData) {
        if (!fs.existsSync(this.EVENTS_DIR)) {
            fs.mkdirSync(this.EVENTS_DIR, { recursive: true });
        }
        const filePath = path.join(this.EVENTS_DIR, `${eventData.slug}.md`);
        const newHash = this.hashContent(eventData.frontmatter);

        if (fs.existsSync(filePath)) {
            const oldData = fs.readFileSync(filePath, 'utf8');
            const oldMatter = matter(oldData);
            const oldHash = oldMatter.data.__hash || '';
            if (oldHash === newHash) {
                console.log(`[‚úì] –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${eventData.slug}`);
                return;
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ __hash
        const mdContent = matter.stringify('', { ...eventData.frontmatter, __hash: newHash });
        fs.writeFileSync(filePath, mdContent, 'utf8');
        console.log(`[+] –û–±–Ω–æ–≤–ª—ë–Ω: ${eventData.slug}`);
    }

    // === –ë–õ–û–ö: –ü–∞—Ä—Å–∏–Ω–≥ –±–æ–π—Ü–æ–≤, –ª–æ–≥–∏–∫–∞ –∏–∑ fighters-scraper.js ===

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –±–æ–π—Ü–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    async getAllFighterLinks() {
        const links = new Set();

        for (let i = 1; i <= this.MAX_FIGHTER_PAGES; i++) {
            const pageUrl = (i === 1)
                ? this.FIGHTERS_LIST_URL
                : `${this.FIGHTERS_LIST_URL}page-${i}.html`;

            let $;
            try {
                $ = await this.fetchHTML(pageUrl);
            } catch (err) {
                console.warn(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–π—Ü–æ–≤ ${i}: ${err.message}`);
                break;
            }

            const beforeCount = links.size;

            // –ù–∞ —Å–∞–π—Ç–µ –æ–±—ã—á–Ω–æ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ /ru/fighters/imya_familia.html
            $('a[href^="/ru/fighters/"]').each((_, el) => {
                const href = $(el).attr('href');
                if (href.endsWith('.html') && !href.includes('page-')) {
                    links.add(this.BASE_URL + href);
                }
            });

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∑–∞–≤–µ—Ä—à–∏–º
            if (links.size === beforeCount) {
                break;
            }
            await this.sleep(this.DELAY_MS_FIGHTERS);
        }

        return Array.from(links);
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ win/loss/draw
    parseRecord($) {
        const winText = $('span.win').first().text().trim();
        const loseText = $('span.lose').first().text().trim();
        const drawText = $('span.draw').first().text().trim();

        let wins = 0, losses = 0, draws = 0;
        if (winText && loseText && drawText) {
            wins = parseInt(winText, 10) || 0;
            losses = parseInt(loseText, 10) || 0;
            draws = parseInt(drawText, 10) || 0;
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å p.counts
            const raw = $('p.counts').text().trim();
            const match = raw.match(/(\d+)\s*-\s*(\d+)\s*-\s*(\d+)/);
            if (match) {
                wins = parseInt(match[1], 10) || 0;
                losses = parseInt(match[2], 10) || 0;
                draws = parseInt(match[3], 10) || 0;
            }
        }
        return { wins, losses, draws };
    }

    // –ü–∞—Ä—Å–∏–º –º–µ—Ç–æ–¥—ã –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
    parseWinLossMethods($) {
        const winMethods = [];
        const loseMethods = [];

        // –ü–æ–±–µ–¥—ã
        $('ul.wins-list li').each((_, el) => {
            const methodText = $(el).find('p.wins-list__text').text().trim();
            const detailText = $(el).find('p.wins-list__text--down').text().trim();
            if (!methodText) return;
            let count = 0, percentage = '';

            const countMatch = detailText.match(/(\d+)/);
            if (countMatch) {
                count = parseInt(countMatch[1], 10) || 0;
            }
            const pctMatch = detailText.match(/\((\d+%)/);
            if (pctMatch) {
                percentage = pctMatch[1] + ')';
            } else {
                const plainPct = detailText.match(/(\d+)%/);
                if (plainPct) {
                    percentage = plainPct[1] + '%';
                }
            }
            winMethods.push({ method: methodText, count, percentage });
        });

        // "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø–æ–±–µ–¥: X" ‚Äî –∏–Ω–æ–≥–¥–∞
        const unknownWins = $('p.inner-wrapper__footer')
            .filter((_, e) => $(e).text().includes('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø–æ–±–µ–¥'))
            .text();
        if (unknownWins) {
            const m = unknownWins.match(/(\d+)/);
            if (m) {
                const count = parseInt(m[1], 10) || 0;
                winMethods.push({ method: 'Unknown', count, percentage: '' });
            }
        }

        // –ü–æ—Ä–∞–∂–µ–Ω–∏—è
        $('ul.lose-list li').each((_, el) => {
            const methodText = $(el).find('p.lose-list__text').text().trim();
            const detailText = $(el).find('p.lose-list__text--down').text().trim();
            if (!methodText) return;
            let count = 0, percentage = '';

            const countMatch = detailText.match(/(\d+)/);
            if (countMatch) {
                count = parseInt(countMatch[1], 10) || 0;
            }
            const pctMatch = detailText.match(/\((\d+%)/);
            if (pctMatch) {
                percentage = pctMatch[1] + ')';
            } else {
                const plainPct = detailText.match(/(\d+)%/);
                if (plainPct) {
                    percentage = plainPct[1] + '%';
                }
            }
            loseMethods.push({ method: methodText, count, percentage });
        });

        return { winMethods, loseMethods };
    }

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–∞ –æ –±–æ–π—Ü–µ
    parseFighterData($) {
        const info = {};
        // h1#name ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –æ–±—â–µ–µ –∏–º—è
        const h1 = $('h1#name').text().trim();
        // –ê–Ω–≥–ª. –∏–º—è
        const h2en = $('h2.name-english').text().trim();

        let name_en = '';
        let name_ru = '';

        if (h2en && h2en.toLowerCase() !== h1.toLowerCase()) {
            name_en = h2en;
            name_ru = h1;
        } else {
            name_en = h1 || 'unnamed';
            name_ru = '';
        }

        info.title = name_en;
        if (name_ru) {
            info.name_ru = name_ru;
        }

        // –†–µ–∫–æ—Ä–¥
        const { wins, losses, draws } = this.parseRecord($);
        info.wins = wins;
        info.losses = losses;
        info.draws = draws;

        // –ß–∏—Ç–∞–µ–º ul.data-list, –∏—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å –∏ —Ç. –¥.
        $('ul.data-list > li').each((_, el) => {
            const raw = $(el).text().trim().toLowerCase();

            if (raw.includes('–≤–æ–∑—Ä–∞—Å—Ç')) {
                const val = $(el).find('.value').text().trim();
                const age = parseInt(val, 10);
                if (age) info.age = age;
            } else if (raw.includes('—Ä–æ—Å—Ç')) {
                const val = $(el).find('.value').text().trim();
                const ht = parseInt(val, 10);
                if (ht) info.height = ht;
            } else if (raw.includes('–≤–µ—Å')) {
                const val = $(el).find('.value').text().trim();
                const wt = parseInt(val, 10);
                if (wt) info.weight = wt;
            } else if (raw.includes('—Ä–∞–∑–º–∞—Ö —Ä—É–∫')) {
                const val = $(el).find('.value').text().trim();
                const rc = parseInt(val, 10);
                if (rc) info.reach = rc;
            } else if (raw.includes('—Ä–∞–∑–º–∞—Ö –Ω–æ–≥')) {
                const val = $(el).find('.value').text().trim();
                const lrc = parseInt(val, 10);
                if (lrc) info.leg_reach = lrc;
            } else if (raw.includes('–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è')) {
                const place = $(el).find('.new-style').text().trim();
                if (place) {
                    const parts = place.split(',').map(s => s.trim());
                    if (parts.length > 1) {
                        info.country = parts[parts.length - 1];
                    } else {
                        info.country = place;
                    }
                }
            } else if (raw.includes('—Å—Ç–æ–π–∫–∞')) {
                const stanceVal = $(el).find('.value').text().trim();
                if (stanceVal) info.stance = stanceVal;
            } else if (raw.includes('—Å—Ç–∏–ª—å')) {
                const styleVal = $(el).find('.value').text().trim();
                if (styleVal) info.style = styleVal;
            }
        });

        // –†–µ–π—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const rating = $('.rating-fighter-box').text().trim();
        if (rating) {
            info.rank = rating;
        }

        return info;
    }

    // –û–±–æ–±—â—ë–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—Ä–µ–º—è –±–æ—è, first-round finishes –∏ —Ç. –¥.)
    parseMainStats($) {
        const stats = {};
        $('li.stats-list__item').each((_, el) => {
            const leftNum = $(el).find('.left-block .number').text().trim();
            const leftText = $(el).find('.left-block .text').text().trim().toLowerCase();
            const rightNum = $(el).find('.right-block .number').text().trim();
            const rightText = $(el).find('.right-block .text').text().trim().toLowerCase();

            if (leftText.includes('—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–æ—è') && !leftText.includes('ufc')) {
                stats.fight_time_avg = leftNum;
            } else if (leftText.includes('—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–æ—è') && leftText.includes('ufc')) {
                stats.fight_time_ufc_avg = leftNum;
            } else if (leftText.includes('—Ç–µ–π–∫–¥–∞—É–Ω–æ–≤ –∑–∞ –±–æ–π')) {
                stats.takedown_average = parseFloat(leftNum) || 0;
            } else if (leftText.includes('—Å–∞–±–º–∏—à–µ–Ω–æ–≤') && leftText.includes('15')) {
                stats.submission_attempts_per_15_min = parseFloat(leftNum) || 0;
            } else if (leftText.includes('–∑–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ–π–∫–¥–∞—É–Ω')) {
                stats.takedown_defense = leftNum;
            }
            if (rightText.includes('—Ñ–∏–Ω–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ')) {
                stats.first_round_finishes = parseInt(rightNum, 10) || 0;
            }
        });
        return stats;
    }

    // –ü–∞—Ä—Å–∏–º UFC-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—É–¥–∞—Ä—ã –≤ –º–∏–Ω—É—Ç—É, –∑–∞—â–∏—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ç. –ø.)
    parseUFCStats($, stats) {
        $('li.stats-list__item').each((_, el) => {
            const leftBlock = $(el).find('.left-block');
            const rightBlock = $(el).find('.right-block');
            const leftNum = leftBlock.find('.number').text().trim();
            const leftTxt = leftBlock.find('.text').text().trim().toLowerCase();
            const rightNum = rightBlock.find('.number').text().trim();
            const rightTxt = rightBlock.find('.text').text().trim().toLowerCase();

            const parseNumberOrPercent = str => {
                const x = parseFloat(str.replace('%', ''));
                if (!isNaN(x)) {
                    if (str.includes('%')) return str; // "64%"
                    return x; // 0.5, 2.3 –∏ —Ç.–¥.
                }
                return str;
            };

            // –ó–¥–µ—Å—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if (leftTxt.includes('—Ç–µ–π–∫–¥–∞—É–Ω–æ–≤ –∑–∞ –±–æ–π')) {
                stats.takedown_average = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('—Ç–µ–π–∫–¥–∞—É–Ω–æ–≤ –∑–∞ –±–æ–π')) {
                stats.takedown_average = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('—Ç–æ—á–Ω–æ—Å—Ç—å') && leftTxt.includes('—Ç–µ–π–∫–¥–∞—É–Ω')) {
                stats.takedown_accuracy = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('—Ç–æ—á–Ω–æ—Å—Ç—å') && rightTxt.includes('—Ç–µ–π–∫–¥–∞—É–Ω')) {
                stats.takedown_accuracy = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('–∑–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ–π–∫–¥–∞—É–Ω')) {
                stats.takedown_defense = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('–∑–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ–π–∫–¥–∞—É–Ω')) {
                stats.takedown_defense = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É') && leftTxt.includes('–Ω–∞–Ω–æ—Å–∏—Ç')) {
                stats.significant_strikes_per_minute = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É') && rightTxt.includes('–Ω–∞–Ω–æ—Å–∏—Ç')) {
                stats.significant_strikes_per_minute = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É') && leftTxt.includes('–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç')) {
                stats.significant_strikes_absorbed = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É') && rightTxt.includes('–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç')) {
                stats.significant_strikes_absorbed = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('—Ç–æ—á–Ω–æ—Å—Ç—å –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤')) {
                stats.significant_strike_accuracy = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('—Ç–æ—á–Ω–æ—Å—Ç—å –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞—Ä–æ–≤')) {
                stats.significant_strike_accuracy = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞—Ä–∞')) {
                stats.significant_strike_defense = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞—Ä–∞')) {
                stats.significant_strike_defense = parseNumberOrPercent(rightNum);
            }
            if (leftTxt.includes('—Å–∞–±–º–∏—à–µ–Ω–æ–≤') && leftTxt.includes('15')) {
                stats.submission_attempts_per_15_min = parseNumberOrPercent(leftNum);
            }
            if (rightTxt.includes('—Å–∞–±–º–∏—à–µ–Ω–æ–≤') && rightTxt.includes('15')) {
                stats.submission_attempts_per_15_min = parseNumberOrPercent(rightNum);
            }
        });
    }

    // –ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤
    parseFightsHistory($) {
        const history = [];

        // 1) –¢–∞–±–ª–∏—Ü–∞
        const $table = $('table.fight-history, table.fighter-history').first();
        if ($table.length) {
            const headers = [];
            $table.find('thead th').each((_, th) => {
                headers.push($(th).text().trim().toLowerCase());
            });
            $table.find('tbody tr').each((_, tr) => {
                const row = {};
                const tds = $(tr).find('td');
                if (headers.length && tds.length === headers.length) {
                    tds.each((i, td) => {
                        row[headers[i]] = $(td).text().trim();
                    });
                } else {
                    // –°–º–æ—Ç—Ä–∏–º –ø–æ—Ä—è–¥–æ–∫
                    row.date = tds.eq(0).text().trim();
                    row.opponent = tds.eq(1).text().trim();
                    row.result = tds.eq(2).text().trim();
                    row.method = tds.eq(3).text().trim();
                    row.tournament = tds.eq(4).text().trim();
                    row.round = tds.eq(5).text().trim();
                    row.time = tds.eq(6).text().trim();
                }
                history.push(row);
            });
        }

        // 2) ul.history-list
        if (!history.length && $('ul.history-list').length) {
            $('ul.history-list li.history-list__item').each((_, li) => {
                const $li = $(li);
                const fight = {};

                if ($li.hasClass('history-list__item--win')) {
                    fight.result = 'win';
                } else if ($li.hasClass('history-list__item--lose')) {
                    fight.result = 'lose';
                } else if ($li.hasClass('history-list__item--draw')) {
                    fight.result = 'draw';
                } else if ($li.hasClass('history-list__item--cancelled')) {
                    fight.result = '';
                    fight.status = '–æ—Ç–º–µ–Ω—ë–Ω';
                }

                const dateLine = $li.find('.top-wrapper .date').text().trim();
                const dateMatch = dateLine.match(/(\d{2}\.\d{2}\.\d{4})/);
                if (dateMatch) fight.date = dateMatch[1];
                if (/–æ—Ç–º–µ–Ω[–µ—ë]–Ω/i.test(dateLine)) {
                    fight.status = '–æ—Ç–º–µ–Ω—ë–Ω';
                }

                // –û–ø–ø–æ–Ω–µ–Ω—Ç
                const oppEl = $li.find('.top-wrapper .info-block .pair a').first();
                if (oppEl.length) {
                    fight.opponent = oppEl.text().trim();
                    const oppHref = oppEl.attr('href');
                    if (oppHref) {
                        fight.opponent_link = this.BASE_URL + oppHref;
                    }
                } else {
                    const rawOpp = $li.find('.top-wrapper .info-block .pair').text().trim();
                    const oppMatch = rawOpp.match(/vs\s+(.*)/i);
                    if (oppMatch) {
                        fight.opponent = oppMatch[1].trim();
                    }
                }

                fight.round = $li.find('.top-wrapper .round span').text().trim() || '';
                fight.time = $li.find('.top-wrapper .time span').text().trim() || '';
                fight.method = $li.find('.top-wrapper .method span').text().trim() || '';

                $li.find('.bottom-wrapper .info-list__item').each((_, item) => {
                    const topText = $(item).find('.top-text').text().trim().toLowerCase();
                    const bottomText = $(item).find('.bottom-text').text().trim();
                    if (topText.includes('—Ç—É—Ä–Ω–∏—Ä')) {
                        fight.tournament = bottomText;
                    } else if (topText.includes('—Ñ–æ—Ä–º–∞—Ç –±–æ—è')) {
                        fight.format = bottomText;
                    } else if (topText.includes('–¥–∏–≤–∏–∑–∏–æ–Ω')) {
                        fight.division = bottomText;
                    } else if (topText.includes('–≤–∞–∂–Ω–æ—Å—Ç—å –±–æ—è')) {
                        fight.importance = bottomText;
                    } else if (topText.includes('–≤–µ—Å –±–æ–π—Ü–∞')) {
                        fight.fighter_weight = bottomText;
                    } else if (topText.includes('—Å–ø–æ—Å–æ–± –ø–æ–±–µ–¥—ã')) {
                        fight.method = bottomText;
                    }
                });

                history.push(fight);
            });
        }

        return history;
    }

    // –ü–∞—Ä—Å–∏–º –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞
    async parseFighter(url) {
        const $ = await this.fetchHTML(url);

        // 1) –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const fighterData = this.parseFighterData($);
        // 2) –ú–µ—Ç–æ–¥—ã –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
        const { winMethods, loseMethods } = this.parseWinLossMethods($);
        if (winMethods.length) {
            fighterData.win_methods = winMethods;
        }
        if (loseMethods.length) {
            fighterData.loss_methods = loseMethods;
        }
        // 3) –î–æ–ø. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const mainStats = this.parseMainStats($);
        Object.assign(fighterData, mainStats);
        this.parseUFCStats($, fighterData);
        // 4) –ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤
        const fightsHistory = this.parseFightsHistory($);
        if (fightsHistory.length) {
            fighterData.fights_history = fightsHistory;
        }
        // 5) –ü–æ–ª—è source_url + meta
        fighterData.source_url = url;
        fighterData.meta = { updated: new Date().toISOString() };

        // –ü–æ–ª—É—á–∞–µ–º slug
        let slug = '';
        const urlMatch = url.match(/\/fighters\/([^/]+)\.html/i);
        if (urlMatch) {
            slug = urlMatch[1]; // –ø–æ –æ–±—Ä–∞–∑—Ü—É fighters-scraper.js
        } else {
            slug = this.slugify(fighterData.title);
        }

        // permalink, layout
        fighterData.permalink = `/fighters/${slug}/`;
        fighterData.layout = 'fighter';

        return { slug, frontmatter: fighterData };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–π—Ü–∞ –≤ .md
    saveFighterToFile(fighter) {
        if (!fs.existsSync(this.FIGHTERS_DIR)) {
            fs.mkdirSync(this.FIGHTERS_DIR, { recursive: true });
        }
        const filePath = path.join(this.FIGHTERS_DIR, `${fighter.slug}.md`);
        const newHash = this.hashContent(fighter.frontmatter);

        if (fs.existsSync(filePath)) {
            const oldData = fs.readFileSync(filePath, 'utf8');
            const oldMatter = matter(oldData);
            const oldHash = oldMatter.data.__hash || '';
            if (oldHash === newHash) {
                console.log(`[‚úì] –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${fighter.slug}`);
                return;
            }
        }
        const mdContent = matter.stringify('', { ...fighter.frontmatter, __hash: newHash });
        fs.writeFileSync(filePath, mdContent, 'utf8');
        console.log(`[+] –û–±–Ω–æ–≤–ª—ë–Ω: ${fighter.slug}`);
    }

    // === –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –∑–∞—Ç–µ–º –±–æ–π—Ü–æ–≤) ===
    async run() {
        // –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (!fs.existsSync(this.EVENTS_DIR)) {
            fs.mkdirSync(this.EVENTS_DIR, { recursive: true });
        }
        if (!fs.existsSync(this.FIGHTERS_DIR)) {
            fs.mkdirSync(this.FIGHTERS_DIR, { recursive: true });
        }

        try {
            // 1) –ü–∞—Ä—Å–∏–º —Ç—É—Ä–Ω–∏—Ä—ã
            console.log('üìÖ –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã...');
            const eventLinks = await this.getEventLinks();
            console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${eventLinks.length}`);

            let count = 0;
            for (const link of eventLinks) {
                count++;
                console.log(`\n[${count}/${eventLinks.length}] –ü–∞—Ä—Å–∏–º —Ç—É—Ä–Ω–∏—Ä: ${link}`);
                try {
                    const eventObj = await this.parseEvent(link);
                    this.saveEventToFile(eventObj);
                } catch (err) {
                    console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—É—Ä–Ω–∏—Ä–∞ (${link}): ${err.message}`);
                }
                await this.sleep(this.DELAY_MS_EVENTS);
            }
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.\n');

            // 2) –ü–∞—Ä—Å–∏–º –±–æ–π—Ü–æ–≤
            console.log('ü•ä –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–æ–π—Ü–æ–≤...');
            const fighterLinks = await this.getAllFighterLinks();
            console.log(`üîó –ù–∞–π–¥–µ–Ω–æ –±–æ–π—Ü–æ–≤: ${fighterLinks.length}`);

            let idx = 0;
            for (const url of fighterLinks) {
                idx++;
                console.log(`\n[${idx}/${fighterLinks.length}] –ü–∞—Ä—Å–∏–º –±–æ–π—Ü–∞: ${url}`);
                try {
                    const fighterData = await this.parseFighter(url);
                    this.saveFighterToFile(fighterData);
                } catch (err) {
                    console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–æ–π—Ü–∞ (${url}): ${err.message}`);
                }
                await this.sleep(this.DELAY_MS_FIGHTERS);
            }
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –±–æ–π—Ü–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
        }
    }
}

// === –ó–∞–ø—É—Å–∫ ===
(async () => {
    const scraper = new UFCGidStatsScraper();
    await scraper.runFightersOnly();
})();
